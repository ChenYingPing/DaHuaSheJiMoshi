//
//  DaHuaSheJiMoShi.h
//  DaHuaSheJiMoshi
//
//  Created by 陈应平 on 2017/7/6.
//  Copyright © 2017年 陈应平. All rights reserved.
//


/* 
 
开放-封闭原则: 是说软件实体(类、模块、函数等待)应该可以扩展，但是不可修改

 
依赖倒转原则:   （抽象其实就是接口）
 A.高层模块不应该依赖低层模块，两者都应该依赖抽象。
 B.抽象不应该依赖细节，细节应该依赖于抽象。
 

装饰模式：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。
 

代理模式：为其他对象提供一种代理以控制对这个对象的访问。
 
 
原型模式：用原型实例指定创建对象 ，并且通过拷贝这些原型创建新的对象。
 
 
迪米特法则：如果两个类不彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用
 
 
外观模式：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用
 

建造者模式：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示
 

抽象工厂模式：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类
 

状态模式：当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类


适配器模式：将一个类的接口转换成客户希望的另一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的类可以一起工作
 

备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态
 

组合模式：将对象组合成树形结构以表示'部分-整体'的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性
 

单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点



桥接模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化



命令模式：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。
 
 
职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。
**类似响应链
 
 
中介者模式：用一个中介对象来封装一系统的对象交互。中介者使各对象不需要显式地互相引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。
***组件化的实现思路，url跳转方式需要一个 meditor，识别不同的url跳转到不同的控制器，target-action方式需要一个类别，使用runtime识别取得类名，实例化后进行跳转。都属于中介者模式。
 
解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。
 
 
访问者模式：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。


